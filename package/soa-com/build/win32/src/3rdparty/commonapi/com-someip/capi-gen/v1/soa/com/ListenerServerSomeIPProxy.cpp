/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/soa/com/ListenerServerSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createListenerServerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< ListenerServerSomeIPProxy>(_address, _connection);
}

void initializeListenerServerSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:soa.com.ListenerServer:v1_0:soa.com.listener",
        0x11170, 0x11558, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         ListenerServer::getInterface(),
         &createListenerServerSomeIPProxy);
}

INITIALIZER(registerListenerServerSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeListenerServerSomeIPProxy);
}

ListenerServerSomeIPProxy::ListenerServerSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection , true)
,          notifyBooleanSelective_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0xcf09), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr))),
          notifyIntegerSelective_(*this, 0x2, CommonAPI::SomeIP::event_id_t(0xcf0a), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr))),
          notifyRealSelective_(*this, 0x3, CommonAPI::SomeIP::event_id_t(0xcf0b), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr))),
          notifyStringSelective_(*this, 0x4, CommonAPI::SomeIP::event_id_t(0xcf0c), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr))),
          notifyEnumSelective_(*this, 0x5, CommonAPI::SomeIP::event_id_t(0xcf0d), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)))
    {
    }


    ListenerServerSomeIPProxy::NotifyBooleanSelectiveEvent& ListenerServerSomeIPProxy::getNotifyBooleanSelectiveEvent() {
        return notifyBooleanSelective_;
    }
    ListenerServerSomeIPProxy::NotifyIntegerSelectiveEvent& ListenerServerSomeIPProxy::getNotifyIntegerSelectiveEvent() {
        return notifyIntegerSelective_;
    }
    ListenerServerSomeIPProxy::NotifyRealSelectiveEvent& ListenerServerSomeIPProxy::getNotifyRealSelectiveEvent() {
        return notifyRealSelective_;
    }
    ListenerServerSomeIPProxy::NotifyStringSelectiveEvent& ListenerServerSomeIPProxy::getNotifyStringSelectiveEvent() {
        return notifyStringSelective_;
    }
    ListenerServerSomeIPProxy::NotifyEnumSelectiveEvent& ListenerServerSomeIPProxy::getNotifyEnumSelectiveEvent() {
        return notifyEnumSelective_;
    }

        void ListenerServerSomeIPProxy::SayHello(const int32_t &_pid, const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_pid(_pid, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        int32_t,
                        CommonAPI::SomeIP::IntegerDeployment<int32_t>
                    >,
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_pid, deploy_path,
    _internalCallStatus);
    }
    std::future<CommonAPI::CallStatus> ListenerServerSomeIPProxy::SayHelloAsync(const int32_t &_pid, const std::string &_path, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_pid(_pid, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    int32_t,
                    CommonAPI::SomeIP::IntegerDeployment<int32_t>
                >,
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            true,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_pid, deploy_path,
            [_callback] (CommonAPI::CallStatus _internalCallStatus) {
                if (_callback)
                    _callback(_internalCallStatus);
            },
            std::make_tuple());
    }



    void ListenerServerSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace com
} // namespace soa
} // namespace v1
