/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_Controller_Server_PROXY_BASE_HPP_
#define V1_SOA_COM_Controller_Server_PROXY_BASE_HPP_

#include <v1/soa/com/ControllerServer.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

class ControllerServerProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&)> SetBooleanAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetIntegerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetRealAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetStringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetEnumAsyncCallback;



    virtual void SetBoolean(const std::string &_path, const bool &_value, const uint64_t &_timestamp, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetBooleanAsync(const std::string &_path, const bool &_value, const uint64_t &_timestamp, SetBooleanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetInteger(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetIntegerAsync(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, SetIntegerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetReal(const std::string &_path, const double &_value, const uint64_t &_timestamp, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetRealAsync(const std::string &_path, const double &_value, const uint64_t &_timestamp, SetRealAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetString(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetStringAsync(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, SetStringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void SetEnum(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetEnumAsync(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, SetEnumAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace com
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_COM_Controller_Server_PROXY_BASE_HPP_
