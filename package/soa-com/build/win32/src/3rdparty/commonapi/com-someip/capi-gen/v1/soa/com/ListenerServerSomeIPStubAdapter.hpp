/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_LISTENER_SERVER_SOMEIP_STUB_ADAPTER_HPP_
#define V1_SOA_COM_LISTENER_SERVER_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/soa/com/ListenerServerStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

template <typename _Stub = ::v1::soa::com::ListenerServerStub, typename... _Stubs>
class ListenerServerSomeIPStubAdapterInternal
    : public virtual ListenerServerStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ListenerServerSomeIPStubAdapterHelper;

    ~ListenerServerSomeIPStubAdapterInternal() {
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x1);
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x2);
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x3);
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x4);
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x5);
        deactivateManagedInstances();
        ListenerServerSomeIPStubAdapterHelper::deinit();
    }

    void fireNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const bool &_value, const uint64_t &_timestamp);
    void sendNotifyBooleanSelective(const std::string &_path, const bool &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyBooleanSelective();

    void fireNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp);
    void sendNotifyIntegerSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyIntegerSelective();

    void fireNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const double &_value, const uint64_t &_timestamp);
    void sendNotifyRealSelective(const std::string &_path, const double &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyRealSelective();

    void fireNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const std::string &_value, const uint64_t &_timestamp);
    void sendNotifyStringSelective(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyStringSelective();

    void fireNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp);
    void sendNotifyEnumSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyEnumSelective();

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::soa::com::ListenerServerStub,
        CommonAPI::Version
    > getListenerServerInterfaceVersionStubDispatcher;


    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ListenerServerStub,
        std::tuple< int32_t, std::string>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< >
    > sayHelloStubDispatcher;

    ListenerServerSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ListenerServerSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ListenerServerStub>(_stub))
    {

        
                ListenerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &sayHelloStubDispatcher );
        subscribersForNotifyBooleanSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyBooleanSelectiveEventSubscribeHandler =
            std::bind(&ListenerServerSomeIPStubAdapterInternal::NotifyBooleanSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x1, NotifyBooleanSelectiveEventSubscribeHandler);

        subscribersForNotifyIntegerSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyIntegerSelectiveEventSubscribeHandler =
            std::bind(&ListenerServerSomeIPStubAdapterInternal::NotifyIntegerSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x2, NotifyIntegerSelectiveEventSubscribeHandler);

        subscribersForNotifyRealSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyRealSelectiveEventSubscribeHandler =
            std::bind(&ListenerServerSomeIPStubAdapterInternal::NotifyRealSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x3, NotifyRealSelectiveEventSubscribeHandler);

        subscribersForNotifyStringSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyStringSelectiveEventSubscribeHandler =
            std::bind(&ListenerServerSomeIPStubAdapterInternal::NotifyStringSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x4, NotifyStringSelectiveEventSubscribeHandler);

        subscribersForNotifyEnumSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyEnumSelectiveEventSubscribeHandler =
            std::bind(&ListenerServerSomeIPStubAdapterInternal::NotifyEnumSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x5, NotifyEnumSelectiveEventSubscribeHandler);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xcf09), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xcf0a), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x3));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xcf0b), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x4));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xcf0c), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x5));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0xcf0d), itsEventGroups, false);
        }
    }

private:
std::mutex NotifyBooleanSelectiveEventMutex_;
bool NotifyBooleanSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
std::mutex NotifyIntegerSelectiveEventMutex_;
bool NotifyIntegerSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
std::mutex NotifyRealSelectiveEventMutex_;
bool NotifyRealSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
std::mutex NotifyStringSelectiveEventMutex_;
bool NotifyStringSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
std::mutex NotifyEnumSelectiveEventMutex_;
bool NotifyEnumSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::soa::com::ListenerServerStub,
    CommonAPI::Version
    > ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getListenerServerInterfaceVersionStubDispatcher(&ListenerServerStub::lockInterfaceVersionAttribute, &ListenerServerStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ListenerServerStub,
    std::tuple< int32_t, std::string>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::StringDeployment>,
    std::tuple< >
> ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sayHelloStubDispatcher(
    &ListenerServerStub::SayHello,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const bool &_value, const uint64_t &_timestamp) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  bool
        ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0xcf09),
              false,
               deployed_path 
              , _value
              ,  deployed_timestamp 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyBooleanSelective(const std::string &_path, const bool &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyBooleanSelectiveEventMutex_);
        if (subscribersForNotifyBooleanSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyBooleanSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyBooleanSelectiveEventMutex_);
            found = (subscribersForNotifyBooleanSelective_->find(*clientIdIterator) != subscribersForNotifyBooleanSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyBooleanSelective(*clientIdIterator, _path, _value, _timestamp);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeForNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyBooleanSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyBooleanSelectiveEventMutex_);
            subscribersForNotifyBooleanSelective_->insert(clientId);
        }
        ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyBooleanSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyBooleanSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyBooleanSelectiveEventMutex_);
        subscribersForNotifyBooleanSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyBooleanSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyBooleanSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyBooleanSelective_);
}

template <typename _Stub, typename... _Stubs>
bool ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyBooleanSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeForNotifyBooleanSelective(clientId, result);
    } else {
        unsubscribeFromNotifyBooleanSelective(clientId);
    }
    return result;
}


template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deployed_value(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > 
        ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0xcf0a),
              false,
               deployed_path 
              ,  deployed_value 
              ,  deployed_timestamp 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyIntegerSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyIntegerSelectiveEventMutex_);
        if (subscribersForNotifyIntegerSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyIntegerSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyIntegerSelectiveEventMutex_);
            found = (subscribersForNotifyIntegerSelective_->find(*clientIdIterator) != subscribersForNotifyIntegerSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyIntegerSelective(*clientIdIterator, _path, _value, _timestamp);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeForNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyIntegerSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyIntegerSelectiveEventMutex_);
            subscribersForNotifyIntegerSelective_->insert(clientId);
        }
        ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyIntegerSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyIntegerSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyIntegerSelectiveEventMutex_);
        subscribersForNotifyIntegerSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyIntegerSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyIntegerSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyIntegerSelective_);
}

template <typename _Stub, typename... _Stubs>
bool ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyIntegerSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeForNotifyIntegerSelective(clientId, result);
    } else {
        unsubscribeFromNotifyIntegerSelective(clientId);
    }
    return result;
}


template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const double &_value, const uint64_t &_timestamp) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  double
        ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0xcf0b),
              false,
               deployed_path 
              , _value
              ,  deployed_timestamp 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyRealSelective(const std::string &_path, const double &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyRealSelectiveEventMutex_);
        if (subscribersForNotifyRealSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyRealSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyRealSelectiveEventMutex_);
            found = (subscribersForNotifyRealSelective_->find(*clientIdIterator) != subscribersForNotifyRealSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyRealSelective(*clientIdIterator, _path, _value, _timestamp);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeForNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyRealSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyRealSelectiveEventMutex_);
            subscribersForNotifyRealSelective_->insert(clientId);
        }
        ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyRealSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyRealSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyRealSelectiveEventMutex_);
        subscribersForNotifyRealSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyRealSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyRealSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyRealSelective_);
}

template <typename _Stub, typename... _Stubs>
bool ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyRealSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeForNotifyRealSelective(clientId, result);
    } else {
        unsubscribeFromNotifyRealSelective(clientId);
    }
    return result;
}


template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const std::string &_value, const uint64_t &_timestamp) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_value(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0xcf0c),
              false,
               deployed_path 
              ,  deployed_value 
              ,  deployed_timestamp 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyStringSelective(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyStringSelectiveEventMutex_);
        if (subscribersForNotifyStringSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyStringSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyStringSelectiveEventMutex_);
            found = (subscribersForNotifyStringSelective_->find(*clientIdIterator) != subscribersForNotifyStringSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyStringSelective(*clientIdIterator, _path, _value, _timestamp);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeForNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyStringSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyStringSelectiveEventMutex_);
            subscribersForNotifyStringSelective_->insert(clientId);
        }
        ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyStringSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyStringSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyStringSelectiveEventMutex_);
        subscribersForNotifyStringSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyStringSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyStringSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyStringSelective_);
}

template <typename _Stub, typename... _Stubs>
bool ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyStringSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeForNotifyStringSelective(clientId, result);
    } else {
        unsubscribeFromNotifyStringSelective(clientId);
    }
    return result;
}


template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_path(_path, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deployed_value(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        ,  CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > 
        ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0xcf0d),
              false,
               deployed_path 
              ,  deployed_value 
              ,  deployed_timestamp 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyEnumSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyEnumSelectiveEventMutex_);
        if (subscribersForNotifyEnumSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyEnumSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyEnumSelectiveEventMutex_);
            found = (subscribersForNotifyEnumSelective_->find(*clientIdIterator) != subscribersForNotifyEnumSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyEnumSelective(*clientIdIterator, _path, _value, _timestamp);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeForNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyEnumSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyEnumSelectiveEventMutex_);
            subscribersForNotifyEnumSelective_->insert(clientId);
        }
        ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyEnumSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    ListenerServerSomeIPStubAdapterHelper::stub_->onNotifyEnumSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyEnumSelectiveEventMutex_);
        subscribersForNotifyEnumSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyEnumSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyEnumSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyEnumSelective_);
}

template <typename _Stub, typename... _Stubs>
bool ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyEnumSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeForNotifyEnumSelective(clientId, result);
    } else {
        unsubscribeFromNotifyEnumSelective(clientId);
    }
    return result;
}


template <typename _Stub = ::v1::soa::com::ListenerServerStub, typename... _Stubs>
class ListenerServerSomeIPStubAdapter
    : public ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< ListenerServerSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    ListenerServerSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ListenerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace com
} // namespace soa
} // namespace v1

#endif // V1_SOA_COM_Listener_Server_SOMEIP_STUB_ADAPTER_HPP_
