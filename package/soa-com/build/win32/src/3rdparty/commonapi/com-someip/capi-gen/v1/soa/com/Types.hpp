/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_Types_HPP_
#define V1_SOA_COM_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

struct Types {
    struct Position : CommonAPI::Struct< uint32_t, uint32_t> {
    
        Position()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
        }
        Position(const uint32_t &_x, const uint32_t &_y)
        {
            std::get< 0>(values_) = _x;
            std::get< 1>(values_) = _y;
        }
        inline const uint32_t &getX() const { return std::get< 0>(values_); }
        inline void setX(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getY() const { return std::get< 1>(values_); }
        inline void setY(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const Position& _other) const {
        return (getX() == _other.getX() && getY() == _other.getY());
        }
        inline bool operator!=(const Position &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct Size : CommonAPI::Struct< uint32_t, uint32_t> {
    
        Size()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
        }
        Size(const uint32_t &_width, const uint32_t &_height)
        {
            std::get< 0>(values_) = _width;
            std::get< 1>(values_) = _height;
        }
        inline const uint32_t &getWidth() const { return std::get< 0>(values_); }
        inline void setWidth(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getHeight() const { return std::get< 1>(values_); }
        inline void setHeight(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const Size& _other) const {
        return (getWidth() == _other.getWidth() && getHeight() == _other.getHeight());
        }
        inline bool operator!=(const Size &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct Rect : CommonAPI::Struct< uint32_t, uint32_t, uint32_t, uint32_t> {
    
        Rect()
        {
            std::get< 0>(values_) = 0ul;
            std::get< 1>(values_) = 0ul;
            std::get< 2>(values_) = 0ul;
            std::get< 3>(values_) = 0ul;
        }
        Rect(const uint32_t &_x, const uint32_t &_y, const uint32_t &_width, const uint32_t &_height)
        {
            std::get< 0>(values_) = _x;
            std::get< 1>(values_) = _y;
            std::get< 2>(values_) = _width;
            std::get< 3>(values_) = _height;
        }
        inline const uint32_t &getX() const { return std::get< 0>(values_); }
        inline void setX(const uint32_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint32_t &getY() const { return std::get< 1>(values_); }
        inline void setY(const uint32_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint32_t &getWidth() const { return std::get< 2>(values_); }
        inline void setWidth(const uint32_t &_value) { std::get< 2>(values_) = _value; }
        inline const uint32_t &getHeight() const { return std::get< 3>(values_); }
        inline void setHeight(const uint32_t &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const Rect& _other) const {
        return (getX() == _other.getX() && getY() == _other.getY() && getWidth() == _other.getWidth() && getHeight() == _other.getHeight());
        }
        inline bool operator!=(const Rect &_other) const {
            return !((*this) == _other);
        }
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "soa.com.Types";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct Types

} // namespace com
} // namespace soa
} // namespace v1

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_COM_Types_HPP_
