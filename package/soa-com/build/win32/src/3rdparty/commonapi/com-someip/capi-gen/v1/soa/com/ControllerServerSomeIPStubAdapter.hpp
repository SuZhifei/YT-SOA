/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_CONTROLLER_SERVER_SOMEIP_STUB_ADAPTER_HPP_
#define V1_SOA_COM_CONTROLLER_SERVER_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/soa/com/ControllerServerStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

template <typename _Stub = ::v1::soa::com::ControllerServerStub, typename... _Stubs>
class ControllerServerSomeIPStubAdapterInternal
    : public virtual ControllerServerStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> ControllerServerSomeIPStubAdapterHelper;

    ~ControllerServerSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        ControllerServerSomeIPStubAdapterHelper::deinit();
    }

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        CommonAPI::Version
    > getControllerServerInterfaceVersionStubDispatcher;


    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        std::tuple< std::string, bool, uint64_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< >
    > setBooleanStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        std::tuple< std::string, int32_t, uint64_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< >
    > setIntegerStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        std::tuple< std::string, double, uint64_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< >
    > setRealStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        std::tuple< std::string, std::string, uint64_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< >
    > setStringStubDispatcher;
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::soa::com::ControllerServerStub,
        std::tuple< std::string, int32_t, uint64_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
        std::tuple< >
    > setEnumStubDispatcher;

    ControllerServerSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ControllerServerSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< ControllerServerStub>(_stub))
    {

        
                ControllerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &setBooleanStubDispatcher );
                ControllerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &setIntegerStubDispatcher );
                ControllerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &setRealStubDispatcher );
                ControllerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &setStringStubDispatcher );
                ControllerServerSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &setEnumStubDispatcher );
        // Provided events/fields
    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    CommonAPI::Version
    > ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::getControllerServerInterfaceVersionStubDispatcher(&ControllerServerStub::lockInterfaceVersionAttribute, &ControllerServerStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    std::tuple< std::string, bool, uint64_t>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
    std::tuple< >
> ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::setBooleanStubDispatcher(
    &ControllerServerStub::SetBoolean,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    std::tuple< std::string, int32_t, uint64_t>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
    std::tuple< >
> ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::setIntegerStubDispatcher(
    &ControllerServerStub::SetInteger,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    std::tuple< std::string, double, uint64_t>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
    std::tuple< >
> ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::setRealStubDispatcher(
    &ControllerServerStub::SetReal,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    std::tuple< std::string, std::string, uint64_t>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
    std::tuple< >
> ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::setStringStubDispatcher(
    &ControllerServerStub::SetString,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::soa::com::ControllerServerStub,
    std::tuple< std::string, int32_t, uint64_t>,
    std::tuple< >,
    std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::IntegerDeployment<int32_t>, CommonAPI::SomeIP::IntegerDeployment<uint64_t>>,
    std::tuple< >
> ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>::setEnumStubDispatcher(
    &ControllerServerStub::SetEnum,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr)),
    std::make_tuple());

template <typename _Stub = ::v1::soa::com::ControllerServerStub, typename... _Stubs>
class ControllerServerSomeIPStubAdapter
    : public ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< ControllerServerSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    ControllerServerSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ControllerServerSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace com
} // namespace soa
} // namespace v1

#endif // V1_SOA_COM_Controller_Server_SOMEIP_STUB_ADAPTER_HPP_
