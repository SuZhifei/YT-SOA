/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_Controller_Server_STUB_DEFAULT_HPP_
#define V1_SOA_COM_Controller_Server_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/soa/com/ControllerServerStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace soa {
namespace com {

/**
 * Provides a default implementation for ControllerServerStubRemoteEvent and
 * ControllerServerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT ControllerServerStubDefault
    : public virtual ControllerServerStub {
public:
    COMMONAPI_EXPORT ControllerServerStubDefault();

    COMMONAPI_EXPORT ControllerServerStubRemoteEvent* initStubAdapter(const std::shared_ptr< ControllerServerStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    COMMONAPI_EXPORT virtual void SetBoolean(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, bool _value, uint64_t _timestamp, SetBooleanReply_t _reply);
    COMMONAPI_EXPORT virtual void SetInteger(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, int32_t _value, uint64_t _timestamp, SetIntegerReply_t _reply);
    COMMONAPI_EXPORT virtual void SetReal(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, double _value, uint64_t _timestamp, SetRealReply_t _reply);
    COMMONAPI_EXPORT virtual void SetString(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _value, uint64_t _timestamp, SetStringReply_t _reply);
    COMMONAPI_EXPORT virtual void SetEnum(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, int32_t _value, uint64_t _timestamp, SetEnumReply_t _reply);


    
protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual ControllerServerStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(ControllerServerStubDefault *_defaultStub);


    private:
        ControllerServerStubDefault *defaultStub_;
    };
protected:
    ControllerServerStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace com
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_COM_Controller_Server_STUB_DEFAULT
