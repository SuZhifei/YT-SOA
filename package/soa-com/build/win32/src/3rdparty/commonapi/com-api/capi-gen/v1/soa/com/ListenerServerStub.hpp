/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_Listener_Server_STUB_HPP_
#define V1_SOA_COM_Listener_Server_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/soa/com/ListenerServer.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ListenerServer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ListenerServerStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual ListenerServer {
 public:

    /**
     * Sends a selective broadcast event for NotifyBoolean. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const bool &_value, const uint64_t &_timestamp) = 0;
    virtual void sendNotifyBooleanSelective(const std::string &_path, const bool &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromNotifyBooleanSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyBooleanSelective() = 0;
    /**
     * Sends a selective broadcast event for NotifyInteger. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp) = 0;
    virtual void sendNotifyIntegerSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromNotifyIntegerSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyIntegerSelective() = 0;
    /**
     * Sends a selective broadcast event for NotifyReal. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const double &_value, const uint64_t &_timestamp) = 0;
    virtual void sendNotifyRealSelective(const std::string &_path, const double &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromNotifyRealSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyRealSelective() = 0;
    /**
     * Sends a selective broadcast event for NotifyString. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const std::string &_value, const uint64_t &_timestamp) = 0;
    virtual void sendNotifyStringSelective(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromNotifyStringSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyStringSelective() = 0;
    /**
     * Sends a selective broadcast event for NotifyEnum. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_path, const int32_t &_value, const uint64_t &_timestamp) = 0;
    virtual void sendNotifyEnumSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromNotifyEnumSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyEnumSelective() = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyBooleanSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyIntegerSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyRealSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyStringSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyEnumSelective_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ListenerServer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ListenerServerStubRemoteEvent
{
public:
    virtual ~ListenerServerStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ListenerServer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ListenerServerStub
    : public virtual CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>
{
public:
    typedef std::function<void ()>SayHelloReply_t;

    virtual ~ListenerServerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// This is the method that will be called on remote calls on the method SayHello.
    virtual void SayHello(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _pid, std::string _path, SayHelloReply_t _reply) = 0;
    /**
     * Sends a selective broadcast event for NotifyBoolean to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyBooleanSelective(const std::string &_path, const bool &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for NotifyBoolean
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyBooleanSelective() {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyBooleanSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyBooleanSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyBooleanSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyBooleanSelective(const std::string &_path, const bool &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyBooleanSelective(_path, _value, _timestamp, _receivers);
    }
    /**
     * Sends a selective broadcast event for NotifyInteger to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyIntegerSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for NotifyInteger
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyIntegerSelective() {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyIntegerSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyIntegerSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyIntegerSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyIntegerSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyIntegerSelective(_path, _value, _timestamp, _receivers);
    }
    /**
     * Sends a selective broadcast event for NotifyReal to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyRealSelective(const std::string &_path, const double &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for NotifyReal
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyRealSelective() {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyRealSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyRealSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyRealSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyRealSelective(const std::string &_path, const double &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyRealSelective(_path, _value, _timestamp, _receivers);
    }
    /**
     * Sends a selective broadcast event for NotifyString to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyStringSelective(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for NotifyString
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyStringSelective() {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyStringSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyStringSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyStringSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyStringSelective(const std::string &_path, const std::string &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyStringSelective(_path, _value, _timestamp, _receivers);
    }
    /**
     * Sends a selective broadcast event for NotifyEnum to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyEnumSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for NotifyEnum
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyEnumSelective() {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyEnumSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyEnumSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyEnumSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyEnumSelective(const std::string &_path, const int32_t &_value, const uint64_t &_timestamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyEnumSelective(_path, _value, _timestamp, _receivers);
    }

    
    using CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ListenerServerStubAdapter, ListenerServerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ListenerServerStubRemoteEvent RemoteEventType;
    typedef ListenerServer StubInterface;
};

} // namespace com
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_COM_Listener_Server_STUB_HPP_
