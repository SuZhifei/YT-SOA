/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/soa/com/ControllerServerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace soa {
namespace com {

ControllerServerStubDefault::ControllerServerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(ControllerServer::getInterfaceVersion()) {
}

const CommonAPI::Version& ControllerServerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

ControllerServerStubRemoteEvent* ControllerServerStubDefault::initStubAdapter(const std::shared_ptr< ControllerServerStubAdapter> &_adapter) {
    CommonAPI::Stub<ControllerServerStubAdapter, ControllerServerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void ControllerServerStubDefault::SetBoolean(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, bool _value, uint64_t _timestamp, SetBooleanReply_t _reply) {
    (void)_client;
    (void)_path;
    (void)_value;
    (void)_timestamp;
    _reply();
}

void ControllerServerStubDefault::SetInteger(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, int32_t _value, uint64_t _timestamp, SetIntegerReply_t _reply) {
    (void)_client;
    (void)_path;
    (void)_value;
    (void)_timestamp;
    _reply();
}

void ControllerServerStubDefault::SetReal(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, double _value, uint64_t _timestamp, SetRealReply_t _reply) {
    (void)_client;
    (void)_path;
    (void)_value;
    (void)_timestamp;
    _reply();
}

void ControllerServerStubDefault::SetString(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, std::string _value, uint64_t _timestamp, SetStringReply_t _reply) {
    (void)_client;
    (void)_path;
    (void)_value;
    (void)_timestamp;
    _reply();
}

void ControllerServerStubDefault::SetEnum(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _path, int32_t _value, uint64_t _timestamp, SetEnumReply_t _reply) {
    (void)_client;
    (void)_path;
    (void)_value;
    (void)_timestamp;
    _reply();
}




ControllerServerStubDefault::RemoteEventHandler::RemoteEventHandler(ControllerServerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace com
} // namespace soa
} // namespace v1
