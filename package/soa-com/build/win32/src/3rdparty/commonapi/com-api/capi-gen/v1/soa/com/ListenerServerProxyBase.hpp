/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201805221014.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_SOA_COM_Listener_Server_PROXY_BASE_HPP_
#define V1_SOA_COM_Listener_Server_PROXY_BASE_HPP_

#include <v1/soa/com/ListenerServer.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace soa {
namespace com {

class ListenerServerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::SelectiveEvent< std::string, bool, uint64_t> NotifyBooleanSelectiveEvent;
    typedef CommonAPI::SelectiveEvent< std::string, int32_t, uint64_t> NotifyIntegerSelectiveEvent;
    typedef CommonAPI::SelectiveEvent< std::string, double, uint64_t> NotifyRealSelectiveEvent;
    typedef CommonAPI::SelectiveEvent< std::string, std::string, uint64_t> NotifyStringSelectiveEvent;
    typedef CommonAPI::SelectiveEvent< std::string, int32_t, uint64_t> NotifyEnumSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> SayHelloAsyncCallback;


    virtual NotifyBooleanSelectiveEvent& getNotifyBooleanSelectiveEvent() = 0;
    virtual NotifyIntegerSelectiveEvent& getNotifyIntegerSelectiveEvent() = 0;
    virtual NotifyRealSelectiveEvent& getNotifyRealSelectiveEvent() = 0;
    virtual NotifyStringSelectiveEvent& getNotifyStringSelectiveEvent() = 0;
    virtual NotifyEnumSelectiveEvent& getNotifyEnumSelectiveEvent() = 0;

    virtual void SayHello(const int32_t &_pid, const std::string &_path, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SayHelloAsync(const int32_t &_pid, const std::string &_path, SayHelloAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace com
} // namespace soa
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SOA_COM_Listener_Server_PROXY_BASE_HPP_
